//
// build.gradle
//
// @author Burkhard E. Strauss
//
plugins 
{
  id "java"
  id "java-library"
  id "eclipse"
}

subprojects
{
  println "Name/Dir: ${project.name} -> ${projectDir}"
  apply plugin: 'java'
  apply plugin: 'java-library'
  apply plugin: 'eclipse'
  version = '0.6.6-SNAPSHOT'
  repositories 
  { 
    mavenCentral()
    flatDir { dirs '../compiler/lib'}
  }
  dependencies 
  {
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0' 
  }
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
  compileJava.options.encoding     = "ISO-8859-1"
  compileTestJava.options.encoding = "ISO-8859-1"
  java 
  {
    modularity.inferModulePath = true
    withSourcesJar()
    withJavadocJar()
  }
  jar 
  {
    manifest 
    { 
      attributes(
        "Name":    "${project.name}",
        "Version": "V" + rootProject.version,
        "Author":  "Burkhard E. Strauss",
        "URL":     "https://github.com/bestrauss/yaxana",
      ) 
    }
  }
  test {
    useJUnitPlatform()  // make junit tests run at all
    maxParallelForks = 8
  }
  javadoc { source = null } // project specific

  // configure eclipse project text-file encoding 
  eclipse { project {
    file { beforeMerged { gp ->
      setEclipsePreference(file('.settings/org.eclipse.core.resources.prefs'), 'encoding/<project>', compileJava.options.encoding)
    }}
  }}
  project.ext.setProperty = { File file, String key, String value ->
    def s = file.text.replaceAll("(?ms)(^\\Q${key}\\E\\s*=).*?\$", '')
    s = s.replaceAll('\n{2,}', '\n')
    file.text = s + key + '=' + value + '\n'
  }
  project.ext.setEclipsePreference = { File prefsFile, String key, String value ->
    println("edit ${prefsFile}:\t${key} := ${value}")
    if (!prefsFile.exists()) {
        prefsFile.parentFile.mkdirs()
        prefsFile.write("eclipse.preferences.version=1\n")
    }
    setProperty(prefsFile, key, value)
  }
}

// no rootProject:
jar.enabled(false)
tasks.eclipseProject.enabled(false) 
tasks.eclipseClasspath.enabled(false)
tasks.eclipseJdt.enabled(false)
//
// EOF
//
